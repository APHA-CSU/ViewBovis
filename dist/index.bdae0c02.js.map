{"mappings":"AAAA,SAAS,QAAQ,CAAC,EAAE,CAAC,EAAE;IACtB,OAAO,AAAC,CAAA,AAAC,IAAI,IAAK,CAAA,IAAK;AACxB;AAEA,SAAS,aAAa,GAAG,EAAE;IAC1B,OAAO,OAAO,WAAW,CACxB,OAAO,OAAO,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,GAAK,MAAM;AAE/C;AAEA;;;;CAIC,GACD,SAAS,WAAW,KAAK,EAAE;IAC1B,OACC,MACE,QAAQ,GACR,IAAI,GACJ,KAAK,CAAC,MAAM,QAAQ,GAAG,MAAM,GAAG,GAAG,MAAM,QAAQ,GAAG,MAAM,MAAM;AAEpE;AAEA;;;;CAIC,GACD,SAAS,YAAY,KAAK,EAAE;IAC3B,OACC,MACE,QAAQ,GACR,IAAI,GACJ,KAAK,CAAC,MAAM,QAAQ,GAAG,MAAM,GAAG,GAAG,MAAM,QAAQ,GAAG,MAAM,MAAM;AAEpE;AAEA;;;;CAIC,GACD,SAAS,WAAW,KAAK,EAAE;IAC1B,OACC,MACE,QAAQ,GACR,IAAI,GACJ,KAAK,CAAC,MAAM,QAAQ,GAAG,MAAM,GAAG,GAAG,MAAM,QAAQ,GAAG,MAAM,MAAM;AAEpE;AAEA,SAAS,eAAe,MAAM,EAAE,GAAG,EAAE;IACpC,IAAI,YAAY,IAAI,SAAS;IAC7B,IAAI,MAAM,IAAI,kBAAkB,CAAC;IACjC,IAAI,MAAM;QACT,GAAG,IAAI,CAAC,GAAG,OAAO;QAClB,GAAG,IAAI,CAAC;IACT;IACA,IAAI,YAAY,IAAI,kBAAkB,CAAC;IACvC,IAAI,gBAAgB,IAAI,QAAQ,CAAC,WAAW;IAC5C,OAAO;AACR;AAEA,EAAE,QAAQ,CAAC,OAAO,CAAC;IAClB;;;;EAIC,GACD,YAAY,SAAU,UAAU,CAAC,CAAC,EAAE;QACnC,iDAAiD;QACjD,MAAM,WAAW;YAChB,MAAM;YACN,MAAM;YACN,WAAW;YACX,qBAAqB,KAAK;QAC3B;QAEA,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI;QAE1B,IAAI,gBAAgB,OAAO,MAAM,CAAC,CAAC,GAAG,UAAU;QAChD,IAAI,CAAC,iBAAiB,GAAG;QAEzB,IAAI,CAAC,YAAY,GAAG,IAAI;QACxB,OAAO,IAAI;IACZ;IAEA,iBAAiB,SAAU,OAAO,EAAE;QACnC,+CAA+C;QAC/C,IAAI,IAAI,CAAC,WAAW,EACnB,IAAI,CAAC,WAAW,CAAC,MAAM;QAGxB,IAAI,IAAI,CAAC,OAAO,EACf,IAAI,CAAC,OAAO,CAAC,MAAM;QAGpB,+DAA+D;QAC/D,+DAA+D;QAC/D;;;;GAIC,GAED,IAAI,yBAAyB,OAAO,cAAc,CACjD,OAAO,cAAc,CAAC,IAAI,CAAC,OAAO;QAGnC,yIAAyI;QACzI,IAAI,gBAAgB,OAAO,MAAM,CAAC,CAAC,GAAG,wBAAwB,IAAI,CAAC,OAAO;QAE1E,kEAAkE;QAClE,IAAI,aAAa,OAAO,MAAM,CAAC,CAAC,GAAG,eAAe;QAElD,4BAA4B;QAC5B,WAAW,YAAY,GAAG;QAC1B,WAAW,WAAW,GAAG;QACzB,WAAW,IAAI,GAAG,QAAQ,IAAI,GAAG,IAAI,GAAG,KAAK;QAC7C,WAAW,WAAW,GAAG,KAAK;QAE9B,gEAAgE;QAChE,gEAAgE;QAEhE,gEAAgE;QAChE,gEAAgE;QAChE,gEAAgE;QAEhE,IAAI,OAAO,QAAQ,IAAI,CAAC,QAAQ,IAAI,4BAA4B;QAChE,IAAI,UAAU,EAAE,EAAE,uCAAuC;QACzD,MAAM,EAAE,UAAS,EAAE,QAAO,EAAE,GAAG;QAE/B,IAAI,SAAS,SAAS,SAAS,KAC9B,IAAI,CAAC,YAAY,CAAC;YAAE,OAAO,QAAQ,KAAK;YAAE,KAAK,QAAQ,GAAG;QAAC;QAG5D,MAAM,cAAc,IAAI,CAAC,OAAO,IAAI,IAAI;QAExC,YAAY,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,QAAU;YAC5C,qCAAqC;YACrC,MAAM,UAAU,MAAM,GAAG,CAAC,CAAC,QAAU,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;YAElE,MAAM,cAAc,AAAC,CAAA,IAAM;gBAC1B,IAAI,QAAQ;gBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,GAAG,GAAG,IACrC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,EAAE;gBAEvD,OAAO;YACR,CAAA;YAEA,+BAA+B;YAC/B,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YAEJ,oEAAoE;YACpE,IAAI,CAAC,MAAM,YAAY;gBACtB,UAAU,IAAI;gBACd,aAAa;YACd,OAAO,IAAI,YAAY,YACtB,QAAQ,KAAK,CACZ;iBAEK,IAAI,WAAW,YAAY;gBACjC,UAAU,UAAU,KAAK,CAAC,GAAG,UAAU,MAAM,GAAG,KAAK;gBACrD,aAAa,IAAI;gBACjB,0CAA0C;gBAC1C,aAAa,KAAK,KAAK,CAAC;gBACxB,UAAU,IAAI;YACf,OAAO,IAAI,WAAW,YAAY;gBACjC,UAAU,AAAC,CAAA,IAAM;oBAChB,IAAI,kBAAkB,UAAU,KAAK,CAAC,GAAG,UAAU,MAAM,GAAG;oBAC5D,IAAI,gBAAgB,eAAe,iBAAiB,IAAI,CAAC,IAAI;oBAC7D,OAAO,gBAAgB;gBACxB,CAAA;gBAEA,aAAa,IAAI;gBAEjB,0CAA0C;gBAC1C,aAAa,KAAK,KAAK,CAAC;gBACxB,UAAU,IAAI;YACf,CAAC;YAED,IAAI,QAAQ,SAAS,KAAK,eAAe;gBACxC,kBAAkB,AAAC,CAAA,IAAM;oBACxB,IAAI,WAAW,EAAE;oBACjB,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE,IAAK;wBACxC,IAAI,UACH,EAAE,YAAY,CAAC,KAAK,CACnB,IAAI,CAAC,IAAI,EACT,OAAO,CAAC,QAAQ,IAAI,GAAG,QAAQ,MAAM,EAAE,EACvC,OAAO,CAAC,EAAE,IACP;wBACL,SAAS,IAAI,CAAC;oBACf;oBACA,OAAO;gBACR,CAAA;gBAEA,iBAAiB;gBACjB,eAAe,KAAK;YACrB,OAAO,IAAI,QAAQ,SAAS,KAAK,aAAa,QAAQ,MAAM,IAAI,GAAG;gBAClE,iBAAiB;oBAAC,OAAO,CAAC,QAAQ,MAAM,GAAG,EAAE;iBAAC;gBAE9C,kBAAkB;oBACjB,EAAE,YAAY,CAAC,KAAK,CACnB,IAAI,CAAC,IAAI,EACT,OAAO,CAAC,QAAQ,MAAM,GAAG,EAAE,EAC3B,OAAO,CAAC,QAAQ,MAAM,GAAG,EAAE,IACxB;iBACJ;YACF,OAAO;gBACN,iBAAiB,EAAE;gBACnB,IAAI,qBAAqB,EAAE;gBAC3B,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;oBACpC,IAAI,oBAAoB,EAAE,YAAY,CAAC,iBAAiB,CACvD,IAAI,CAAC,IAAI,EACT,SACA,UAAW,CAAA,IAAI,CAAA;oBAGhB,IAAI,mBAAmB;wBACtB,mBAAmB,IAAI,CAAC;wBACxB,eAAe,IAAI,CAAC,kBAAkB,MAAM;oBAC7C,CAAC;gBACF;gBAEA,kBAAkB,AAAC,CAAA,IAAM;oBACxB,IAAI,WAAW,EAAE;oBAEjB,IAAK,IAAI,IAAI,GAAG,IAAI,mBAAmB,MAAM,EAAE,IAAK;wBACnD,IAAI,UAAU,EAAE,YAAY,CAAC,KAAK,CACjC,IAAI,CAAC,IAAI,EACT,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC,WAAW,GAAG,EAAE,EAC9C,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC,WAAW,CAAC;wBAE3C,SAAS,IAAI,CAAC;oBACf;oBACA,OAAO;gBACR,CAAA;YACD,CAAC;YAED,IAAI,OAAO,EAAE;YAEb,sEAAsE;YACtE,MAAM,WAAW,CAAC,MAAM,kBAAkB,CAAC,CAAC,GAAK;gBAChD,IAAI,OAAO,gBAAgB,IAAI,IAAI,QAAQ,IAAI;gBAE/C,IAAI,gBAAgB,EAAE,YAAY,CAAC,WAAW,CAC7C,cAAc,CAAC,EAAE,EACjB,eAAe,CAAC,EAAE,GAAG,OAAO,GAC5B;gBAGD,IAAI,iBAAiB,EAAE,YAAY,CAAC,WAAW,CAC9C,cAAc,CAAC,EAAE,EACjB,eAAe,CAAC,EAAE,GAAG,OAAO,GAC5B;gBAGD,IAAI,YAAY;oBACf;wBAAC,cAAc,GAAG;wBAAE,cAAc,GAAG;qBAAC;oBACtC;wBAAC,cAAc,CAAC,EAAE,CAAC,GAAG;wBAAE,cAAc,CAAC,EAAE,CAAC,GAAG;qBAAC;oBAC9C;wBAAC,eAAe,GAAG;wBAAE,eAAe,GAAG;qBAAC;iBACxC;gBAED,IAAI,MAAM,QAAQ,IAAI,GACnB,EAAE,OAAO,CAAC,WAAW;oBAAE,GAAG,UAAU;oBAAE,GAAG,eAAe;gBAAC,KACzD,EAAE,QAAQ,CAAC,WAAW;oBAAE,GAAG,UAAU;oBAAE,GAAG,eAAe;gBAAC,EAAE;gBAE/D,KAAK,IAAI,CAAC;YACX,GAAG,aAAa;YAEhB,8CAA8C;YAC9C,MAAM,qBAAqB,CAAC,MAAM,kBAAkB,CAAC,CAAC,GAAK;gBAC1D,IAAI,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,MAAM,GAAG;gBAC7C,IAAI,OAAO,gBAAgB,IAAI,IAAI,QAAQ,IAAI;gBAE/C,IAAI,YAAY,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,EAAE;gBAE9D,IAAI,UAAU,eAAe,CAAC,EAAE;gBAEhC,IAAI,YAAY,AAAC,CAAA,MAAM,UAAU,OAAO,CAAA,IAAM,CAAA,KAAK,EAAE,GAAG,GAAE,GACzD,aAAa,AAAC,CAAA,MAAM,UAAU,OAAO,CAAA,IAAM,CAAA,KAAK,EAAE,GAAG,GAAE;gBAExD,IAAI,SAAS,aAAa,KAAK,GAAG,CAAC,YAClC,SAAS,aAAa,KAAK,GAAG,CAAC,YAC/B,UAAU,aAAa,KAAK,GAAG,CAAC,aAChC,UAAU,aAAa,KAAK,GAAG,CAAC;gBAEjC,IAAI,aAAa;oBAChB,GAAG,UAAU,CAAC,GAAG;oBACjB,GAAG,UAAU,CAAC,GAAG;gBAClB;gBACA,IAAI,cAAc;oBACjB,GAAG,UAAU,CAAC,GAAG;oBACjB,GAAG,UAAU,CAAC,GAAG;gBAClB;gBAEA,IAAI,gBAAgB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAChD,iBAAiB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;gBAE/C,IAAI,YAAY;oBACf;wBAAC,cAAc,GAAG;wBAAE,cAAc,GAAG;qBAAC;oBACtC;wBAAC,cAAc,CAAC,EAAE,CAAC,GAAG;wBAAE,cAAc,CAAC,EAAE,CAAC,GAAG;qBAAC;oBAC9C;wBAAC,eAAe,GAAG;wBAAE,eAAe,GAAG;qBAAC;iBACxC;gBAED,IAAI,MAAM,QAAQ,IAAI,GACnB,EAAE,OAAO,CAAC,WAAW;oBAAE,GAAG,UAAU;oBAAE,GAAG,eAAe;gBAAC,KACzD,EAAE,QAAQ,CAAC,WAAW;oBAAE,GAAG,UAAU;oBAAE,GAAG,eAAe;gBAAC,EAAE;gBAE/D,KAAK,IAAI,CAAC;YACX,GAAG,uBAAuB;YAE1B,8DAA8D;YAC9D,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAK;gBAC/C,IAAI,EAAE,oBAAmB,EAAE,GAAG,eAAe,GAAG;gBAEhD,sBAAsB,sBAAsB,oBAAoB,KAAK,CAAC,CAAC;gBACvE,sBAAsB,OAAO,MAAM,CAClC,eACA,aAAa;gBAGd,OAAO,oBAAoB,IAAI,IAAI;gBAEnC,6DAA6D;gBAC7D,IAAI,WAAW,OAAO;oBACrB,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,MAAM,GAAG;oBAC1C,SAAS,SAAS;gBAElB,6DAA6D;gBAC9D,OAAO,IAAI,YAAY,OAAO;oBAC7B,IAAI,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,MAAM,GAAG;oBAC9C,IAAI,UAAU,AAAC,CAAA,IAAM;wBACpB,IACC,QAAQ,SAAS,KAAK,aACtB,QAAQ,mBAAmB,EAE3B,OAAO,AAAC,cAAc,cAAe;6BAC/B;4BACN,IAAI,kBAAkB,cAAe,CAAA,MAAM,MAAM,GAAG,CAAA;4BACpD,OAAO,AAAC,kBAAkB,cAAe;wBAC1C,CAAC;oBACF,CAAA,KAAM,sBAAsB;oBAE5B,SAAS,SAAS;gBAElB,8DAA8D;gBAC/D,OAAO,IAAI,WAAW,OACrB,mBAAmB,QAAQ,IAAI,EAAE;qBAIjC,QAAQ,KAAK,CACZ;gBAED,CAAC,yBAAyB;YAC5B,EAAE,wCAAwC;YAE1C,QAAQ,IAAI,IAAI;QACjB,IAAI,gBAAgB;QAEpB,gEAAgE;QAChE,gEAAgE;QAEhE,IAAI,aAAa,EAAE,UAAU,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG;QAEnB,OAAO,IAAI;IACZ;IAEA,eAAe,WAAY;QAC1B,IAAI,IAAI,CAAC,WAAW,EACnB,OAAO,IAAI,CAAC,WAAW;aAEvB,OAAO,QAAQ,KAAK,CACnB,CAAC,uKAAuK,CAAC;IAG5K;IAEA;;;EAGC,GACD,cAAc,SAAU,EAAE,MAAK,EAAE,IAAG,EAAE,EAAE;QACvC,IAAI,SAAS,KAAK;YACjB,IAAI,UAAU,IAAI,CAAC,UAAU;YAE7B,UAAU,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,UAAU;gBAAC;aAAQ;YAEzD,MAAM,aAAa,QAAQ,GAAG,CAAC,CAAC,UAAY;gBAC3C,yCAAyC;gBACzC,MAAM,cAAc,AAAC,CAAA,IAAM;oBAC1B,IAAI,QAAQ;oBACZ,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,GAAG,GAAG,IACvC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,EAAE;oBAEvD,OAAO;gBACR,CAAA;gBAEA,8CAA8C;gBAC9C,IAAI,OAAO;oBACV,IAAI,oBAAoB,AAAC,CAAA,IAAM;wBAC9B,IAAI,WAAW,QACd,OAAO,OAAO,MAAM,KAAK,CAAC,GAAG,MAAM,MAAM,GAAG;6BACtC,IAAI,WAAW,QAAQ;4BAC7B,IAAI,SAAS,OAAO,MAAM,KAAK,CAAC,GAAG,MAAM,MAAM,GAAG;4BAClD,OAAO,eAAe,QAAQ,IAAI,CAAC,IAAI;wBACxC,CAAC;oBACF,CAAA;oBAEA,IAAI,WAAW,EAAE,YAAY,CAAC,iBAAiB,CAC9C,IAAI,CAAC,IAAI,EACT,SACA,oBAAoB;oBAGrB,UAAU,QAAQ,KAAK,CACtB,SAAS,WAAW,KAAK,KAAK,IAAI,SAAS,WAAW,GAAG,CAAC,EAC1D,QAAQ,MAAM;oBAEf,QAAQ,OAAO,CAAC,SAAS,MAAM;gBAChC,CAAC;gBAED,IAAI,KAAK;oBACR,IAAI,oBAAoB,AAAC,CAAA,IAAM;wBAC9B,IAAI,WAAW,MACd,OAAO,OAAO,IAAI,KAAK,CAAC,GAAG,IAAI,MAAM,GAAG;6BAClC,IAAI,WAAW,MAAM;4BAC3B,IAAI,SAAS,OAAO,IAAI,KAAK,CAAC,GAAG,IAAI,MAAM,GAAG;4BAC9C,OAAO,eAAe,QAAQ,IAAI,CAAC,IAAI;wBACxC,CAAC;oBACF,CAAA;oBAEA,IAAI,SAAS,EAAE,YAAY,CAAC,iBAAiB,CAC5C,IAAI,CAAC,IAAI,EACT,SACA,AAAC,CAAA,cAAc,iBAAgB,IAAK;oBAGrC,UAAU,QAAQ,KAAK,CAAC,GAAG,OAAO,WAAW,GAAG;oBAChD,QAAQ,IAAI,CAAC,OAAO,MAAM;gBAC3B,CAAC;gBAED,OAAO;YACR;YAEA,IAAI,CAAC,OAAO,GAAG,EAAE,QAAQ,CAAC,YAAY;gBACrC,GAAG,IAAI,CAAC,OAAO;gBACf,OAAO;gBACP,QAAQ;gBACR,cAAc;gBACd,aAAa,KAAK;YACnB;YACA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;QAC7B,CAAC;IACF;IAEA,kBAAkB,WAAY;QAC7B,IAAI,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,MAAM;YACvB,OAAO,IAAI,CAAC,WAAW;YACvB,OAAO,IAAI,CAAC,iBAAiB;YAC7B,IAAI,CAAC,YAAY,GAAG,KAAK;QAC1B,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EACf,IAAI,CAAC,OAAO,CAAC,MAAM;IAErB;IAEA,SAAS,WAAY;QACpB,IAAI,CAAC,IAAI,CAAC,IAAI,EACb;QAGD,IAAI,CAAC,WAAW;QAChB,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,WAAW;QAEhB,IAAI,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB;YAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW;QACpC,CAAC;IACF;IAEA,QAAQ,WAAY;QACnB,IAAI,IAAI,CAAC,WAAW,EACnB,IAAI,CAAC,WAAW,CAAC,MAAM;QAExB,IAAI,IAAI,CAAC,OAAO,EACf,IAAI,CAAC,OAAO,CAAC,MAAM;QAEpB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS;IACnD;AACD;AAEA,EAAE,UAAU,CAAC,OAAO,CAAC;IACpB,aAAa,SAAU,KAAK,EAAE;QAC7B,IAAI,KAAK,SAAS,IAAI,CAAC,OAAO,GAAG,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM;QAE/D,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YAClC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM;YAEpC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;QACvC,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG;QAEvB,OAAO,IAAI;IACZ;IAEA,UAAU,SAAU,GAAG,EAAE,KAAK,EAAE;QAC/B,IAAK,IAAI,SAAS,IAAI,CAAC,OAAO,CAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM;QAI5B,IAAI,CAAC,SAAS,CAAC,IAAI,WAAW,EAAE;IACjC;AACD;AAEA,EAAE,GAAG,CAAC,OAAO,CAAC;IACb,aAAa,SAAU,KAAK,EAAE;QAC7B,IAAI,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;QAEtB,IAAI,MAAM,WAAW,EACpB,MAAM,WAAW,CAAC,MAAM;QAEzB,IAAI,MAAM,OAAO,EAChB,MAAM,OAAO,CAAC,MAAM;QAGrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EACpB,OAAO,IAAI;QAGZ,IAAI,IAAI,CAAC,OAAO,EACf,MAAM,QAAQ,CAAC,IAAI;QAGpB,IAAI,MAAM,cAAc,IAAI,IAAI,CAAC,kBAAkB,EAClD,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,MAAM,cAAc;QAG/D,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG;QAEvB,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,eAAe;gBAAE,OAAO;YAAM;YACxC,MAAM,IAAI,CAAC;QACZ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,SAAS,GAAG,IAAI;QAEnC,OAAO,IAAI;IACZ;AACD;AAEA,EAAE,OAAO,CAAC,OAAO,CAAC;IACjB,iBAAiB,SAAU,OAAO,EAAE,OAAO,EAAE;QAC5C,IAAI,WAAW,QAAQ,IAAI,KAAK,YAAY,QAAQ,QAAQ,GAAG,OAAO,EACrE,SAAS,WAAW,SAAS,WAAW,GAAG,IAAI,EAC/C,SAAS,EAAE,EACX,eAAe,WAAW,QAAQ,YAAY,EAC9C,kBACC,AAAC,WAAW,QAAQ,cAAc,IAAK,EAAE,OAAO,CAAC,cAAc,EAChE,QACA,SACA,GACA;QAED,IAAI,CAAC,UAAU,CAAC,UACf,OAAO,IAAI;QAGZ,OAAQ,SAAS,IAAI;YACpB,KAAK;gBACJ,SAAS,gBAAgB;gBACzB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,SAAS,QAAQ;YAE1D,KAAK;gBACJ,IAAK,IAAI,GAAG,MAAM,OAAO,MAAM,EAAE,IAAI,KAAK,IAAK;oBAC9C,SAAS,gBAAgB,MAAM,CAAC,EAAE;oBAClC,OAAO,IAAI,CACV,IAAI,CAAC,aAAa,CAAC,cAAc,SAAS,QAAQ;gBAEpD;gBACA,OAAO,IAAI,EAAE,YAAY,CAAC;YAE3B,KAAK;YACL,KAAK;gBACJ,UAAU,EAAE,OAAO,CAAC,eAAe,CAClC,QACA,SAAS,IAAI,KAAK,eAAe,IAAI,CAAC,EACtC;gBAED,IAAI,WAAW,IAAI,EAAE,QAAQ,CAAC,SAAS;gBACvC,IAAI,QAAQ,UAAU,EACrB,SAAS,UAAU,CAAC,QAAQ,UAAU;gBAEvC,OAAO;YAER,KAAK;YACL,KAAK;gBACJ,UAAU,EAAE,OAAO,CAAC,eAAe,CAClC,QACA,SAAS,IAAI,KAAK,YAAY,IAAI,CAAC,EACnC;gBAED,OAAO,IAAI,EAAE,OAAO,CAAC,SAAS;YAE/B,KAAK;gBACJ,IAAK,IAAI,GAAG,MAAM,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,KAAK,IAAK;oBAC3D,IAAI,QAAQ,IAAI,CAAC,eAAe,CAC/B;wBACC,UAAU,SAAS,UAAU,CAAC,EAAE;wBAChC,MAAM;wBACN,YAAY,QAAQ,UAAU;oBAC/B,GACA;oBAGD,IAAI,OACH,OAAO,IAAI,CAAC;gBAEd;gBACA,OAAO,IAAI,EAAE,YAAY,CAAC;YAE3B;gBACC,MAAM,IAAI,MAAM,2BAA2B;QAC7C;IACD;IAEA,SAAS,SAAU,OAAO,EAAE;QAC3B,IAAI,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,UAAU,QAAQ,QAAQ,EAClE,GACA,KACA;QAED,IAAI,UAAU;YACb,IAAK,IAAI,GAAG,MAAM,SAAS,MAAM,EAAE,IAAI,KAAK,IAAK;gBAChD,+DAA+D;gBAC/D,UAAU,QAAQ,CAAC,EAAE;gBACrB,IACC,QAAQ,UAAU,IAClB,QAAQ,QAAQ,IAChB,QAAQ,QAAQ,IAChB,QAAQ,WAAW,EAEnB,IAAI,CAAC,OAAO,CAAC;YAEf;YACA,OAAO,IAAI;QACZ,CAAC;QAED,IAAI,UAAU,IAAI,CAAC,OAAO;QAE1B,IAAI,QAAQ,MAAM,IAAI,CAAC,QAAQ,MAAM,CAAC,UACrC,OAAO,IAAI;QAGZ,IAAI,QAAQ,IAAI,CAAC,eAAe,CAAC,SAAS;QAC1C,IAAI,CAAC,OACJ,OAAO,IAAI;QAEZ,MAAM,OAAO,GAAG,EAAE,OAAO,CAAC,SAAS,CAAC;QAEpC,MAAM,cAAc,GAAG,MAAM,OAAO;QACpC,IAAI,CAAC,UAAU,CAAC;QAEhB,IAAI,QAAQ,aAAa,EACxB,QAAQ,aAAa,CAAC,SAAS;QAGhC,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB;IAEA,eAAe,SAAU,cAAc,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;QAClE,OAAO,iBACJ,eAAe,SAAS,UACxB,IAAI,EAAE,MAAM,CACZ,QACA,WAAW,QAAQ,qBAAqB,IAAI,QAC3C;IACL;AACD","sources":["src/js/leaflet-arrowheads.js"],"sourcesContent":["function modulus(i, n) {\r\n\treturn ((i % n) + n) % n;\r\n}\r\n\r\nfunction definedProps(obj) {\r\n\treturn Object.fromEntries(\r\n\t\tObject.entries(obj).filter(([k, v]) => v !== undefined)\r\n\t);\r\n}\r\n\r\n/**\r\n * Whether or not a string is in the format '<number>m'\r\n * @param {string} value\r\n * @returns Boolean\r\n */\r\nfunction isInMeters(value) {\r\n\treturn (\r\n\t\tvalue\r\n\t\t\t.toString()\r\n\t\t\t.trim()\r\n\t\t\t.slice(value.toString().length - 1, value.toString().length) === 'm'\r\n\t);\r\n}\r\n\r\n/**\r\n * Whether or not a string is in the format '<number>%'\r\n * @param {string} value\r\n * @returns Boolean\r\n */\r\nfunction isInPercent(value) {\r\n\treturn (\r\n\t\tvalue\r\n\t\t\t.toString()\r\n\t\t\t.trim()\r\n\t\t\t.slice(value.toString().length - 1, value.toString().length) === '%'\r\n\t);\r\n}\r\n\r\n/**\r\n * Whether or not a string is in the format '<number>px'\r\n * @param {string} value\r\n * @returns Boolean\r\n */\r\nfunction isInPixels(value) {\r\n\treturn (\r\n\t\tvalue\r\n\t\t\t.toString()\r\n\t\t\t.trim()\r\n\t\t\t.slice(value.toString().length - 2, value.toString().length) === 'px'\r\n\t);\r\n}\r\n\r\nfunction pixelsToMeters(pixels, map) {\r\n\tlet refPoint1 = map.getCenter();\r\n\tlet xy1 = map.latLngToLayerPoint(refPoint1);\r\n\tlet xy2 = {\r\n\t\tx: xy1.x + Number(pixels),\r\n\t\ty: xy1.y,\r\n\t};\r\n\tlet refPoint2 = map.layerPointToLatLng(xy2);\r\n\tlet derivedMeters = map.distance(refPoint1, refPoint2);\r\n\treturn derivedMeters;\r\n}\r\n\r\nL.Polyline.include({\r\n\t/**\r\n\t * Adds arrowheads to an L.polyline\r\n\t * @param {object} options The options for the arrowhead.  See documentation for details\r\n\t * @returns The L.polyline instance that they arrowheads are attached to\r\n\t */\r\n\tarrowheads: function (options = {}) {\r\n\t\t// Merge user input options with default options:\r\n\t\tconst defaults = {\r\n\t\t\tyawn: 60,\r\n\t\t\tsize: '15%',\r\n\t\t\tfrequency: 'allvertices',\r\n\t\t\tproportionalToTotal: false,\r\n\t\t};\r\n\r\n\t\tthis.options.noClip = true;\r\n\r\n\t\tlet actualOptions = Object.assign({}, defaults, options);\r\n\t\tthis._arrowheadOptions = actualOptions;\r\n\r\n\t\tthis._hatsApplied = true;\r\n\t\treturn this;\r\n\t},\r\n\r\n\tbuildVectorHats: function (options) {\r\n\t\t// Reset variables from previous this._update()\r\n\t\tif (this._arrowheads) {\r\n\t\t\tthis._arrowheads.remove();\r\n\t\t}\r\n\r\n\t\tif (this._ghosts) {\r\n\t\t\tthis._ghosts.remove();\r\n\t\t}\r\n\r\n\t\t//  -------------------------------------------------------- //\r\n\t\t//  ------------  FILTER THE OPTIONS ----------------------- //\r\n\t\t/*\r\n\t\t * The next 3 lines folds the options of the parent polyline into the default options for all polylines\r\n\t\t * The options for the arrowhead are then folded in as well\r\n\t\t * All options defined in parent polyline will be inherited by the arrowhead, unless otherwise specified in the arrowhead(options) call\r\n\t\t */\r\n\r\n\t\tlet defaultOptionsOfParent = Object.getPrototypeOf(\r\n\t\t\tObject.getPrototypeOf(this.options)\r\n\t\t);\r\n\r\n\t\t// merge default options of parent polyline (this.options's prototype's prototype) with options passed to parent polyline (this.options).\r\n\t\tlet parentOptions = Object.assign({}, defaultOptionsOfParent, this.options);\r\n\r\n\t\t// now merge in the options the user has put in the arrowhead call\r\n\t\tlet hatOptions = Object.assign({}, parentOptions, options);\r\n\r\n\t\t// ...with a few exceptions:\r\n\t\thatOptions.smoothFactor = 1;\r\n\t\thatOptions.fillOpacity = 1;\r\n\t\thatOptions.fill = options.fill ? true : false;\r\n\t\thatOptions.interactive = false;\r\n\r\n\t\t//  ------------  FILTER THE OPTIONS END -------------------- //\r\n\t\t//  --------------------------------------------------------- //\r\n\r\n\t\t//  --------------------------------------------------------- //\r\n\t\t//  ------ LOOP THROUGH EACH POLYLINE SEGMENT --------------- //\r\n\t\t//  ------ TO CALCULATE HAT SIZES AND CAPTURE IN ARRAY ------ //\r\n\r\n\t\tlet size = options.size.toString(); // stringify if its a number\r\n\t\tlet allhats = []; // empty array to receive hat polylines\r\n\t\tconst { frequency, offsets } = options;\r\n\r\n\t\tif (offsets?.start || offsets?.end) {\r\n\t\t\tthis._buildGhosts({ start: offsets.start, end: offsets.end });\r\n\t\t}\r\n\r\n\t\tconst lineToTrace = this._ghosts || this;\r\n\r\n\t\tlineToTrace._parts.forEach((peice, index) => {\r\n\t\t\t// Immutable variables for each peice\r\n\t\t\tconst latlngs = peice.map((point) => this._map.layerPointToLatLng(point));\r\n\r\n\t\t\tconst totalLength = (() => {\r\n\t\t\t\tlet total = 0;\r\n\t\t\t\tfor (var i = 0; i < peice.length - 1; i++) {\r\n\t\t\t\t\ttotal += this._map.distance(latlngs[i], latlngs[i + 1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn total;\r\n\t\t\t})();\r\n\r\n\t\t\t// TBD by options if tree below\r\n\t\t\tlet derivedLatLngs;\r\n\t\t\tlet derivedBearings;\r\n\t\t\tlet spacing;\r\n\t\t\tlet noOfPoints;\r\n\r\n\t\t\t//  Determining latlng and bearing arrays based on frequency choice:\r\n\t\t\tif (!isNaN(frequency)) {\r\n\t\t\t\tspacing = 1 / frequency;\r\n\t\t\t\tnoOfPoints = frequency;\r\n\t\t\t} else if (isInPercent(frequency)) {\r\n\t\t\t\tconsole.error(\r\n\t\t\t\t\t'Error: arrowhead frequency option cannot be given in percent.  Try another unit.'\r\n\t\t\t\t);\r\n\t\t\t} else if (isInMeters(frequency)) {\r\n\t\t\t\tspacing = frequency.slice(0, frequency.length - 1) / totalLength;\r\n\t\t\t\tnoOfPoints = 1 / spacing;\r\n\t\t\t\t// round things out for more even spacing:\r\n\t\t\t\tnoOfPoints = Math.floor(noOfPoints);\r\n\t\t\t\tspacing = 1 / noOfPoints;\r\n\t\t\t} else if (isInPixels(frequency)) {\r\n\t\t\t\tspacing = (() => {\r\n\t\t\t\t\tlet chosenFrequency = frequency.slice(0, frequency.length - 2);\r\n\t\t\t\t\tlet derivedMeters = pixelsToMeters(chosenFrequency, this._map);\r\n\t\t\t\t\treturn derivedMeters / totalLength;\r\n\t\t\t\t})();\r\n\r\n\t\t\t\tnoOfPoints = 1 / spacing;\r\n\r\n\t\t\t\t// round things out for more even spacing:\r\n\t\t\t\tnoOfPoints = Math.floor(noOfPoints);\r\n\t\t\t\tspacing = 1 / noOfPoints;\r\n\t\t\t}\r\n\r\n\t\t\tif (options.frequency === 'allvertices') {\r\n\t\t\t\tderivedBearings = (() => {\r\n\t\t\t\t\tlet bearings = [];\r\n\t\t\t\t\tfor (var i = 1; i < latlngs.length; i++) {\r\n\t\t\t\t\t\tlet bearing =\r\n\t\t\t\t\t\t\tL.GeometryUtil.angle(\r\n\t\t\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\t\t\tlatlngs[modulus(i - 1, latlngs.length)],\r\n\t\t\t\t\t\t\t\tlatlngs[i]\r\n\t\t\t\t\t\t\t) + 180;\r\n\t\t\t\t\t\tbearings.push(bearing);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bearings;\r\n\t\t\t\t})();\r\n\r\n\t\t\t\tderivedLatLngs = latlngs;\r\n\t\t\t\tderivedLatLngs.shift();\r\n\t\t\t} else if (options.frequency === 'endonly' && latlngs.length >= 2) {\r\n\t\t\t\tderivedLatLngs = [latlngs[latlngs.length - 1]];\r\n\r\n\t\t\t\tderivedBearings = [\r\n\t\t\t\t\tL.GeometryUtil.angle(\r\n\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\tlatlngs[latlngs.length - 2],\r\n\t\t\t\t\t\tlatlngs[latlngs.length - 1]\r\n\t\t\t\t\t) + 180,\r\n\t\t\t\t];\r\n\t\t\t} else {\r\n\t\t\t\tderivedLatLngs = [];\r\n\t\t\t\tlet interpolatedPoints = [];\r\n\t\t\t\tfor (var i = 0; i < noOfPoints; i++) {\r\n\t\t\t\t\tlet interpolatedPoint = L.GeometryUtil.interpolateOnLine(\r\n\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\tlatlngs,\r\n\t\t\t\t\t\tspacing * (i + 1)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (interpolatedPoint) {\r\n\t\t\t\t\t\tinterpolatedPoints.push(interpolatedPoint);\r\n\t\t\t\t\t\tderivedLatLngs.push(interpolatedPoint.latLng);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tderivedBearings = (() => {\r\n\t\t\t\t\tlet bearings = [];\r\n\r\n\t\t\t\t\tfor (var i = 0; i < interpolatedPoints.length; i++) {\r\n\t\t\t\t\t\tlet bearing = L.GeometryUtil.angle(\r\n\t\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\t\tlatlngs[interpolatedPoints[i].predecessor + 1],\r\n\t\t\t\t\t\t\tlatlngs[interpolatedPoints[i].predecessor]\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbearings.push(bearing);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn bearings;\r\n\t\t\t\t})();\r\n\t\t\t}\r\n\r\n\t\t\tlet hats = [];\r\n\r\n\t\t\t// Function to build hats based on index and a given hatsize in meters\r\n\t\t\tconst pushHats = (size, localHatOptions = {}) => {\r\n\t\t\t\tlet yawn = localHatOptions.yawn ?? options.yawn;\r\n\r\n\t\t\t\tlet leftWingPoint = L.GeometryUtil.destination(\r\n\t\t\t\t\tderivedLatLngs[i],\r\n\t\t\t\t\tderivedBearings[i] - yawn / 2,\r\n\t\t\t\t\tsize\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet rightWingPoint = L.GeometryUtil.destination(\r\n\t\t\t\t\tderivedLatLngs[i],\r\n\t\t\t\t\tderivedBearings[i] + yawn / 2,\r\n\t\t\t\t\tsize\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet hatPoints = [\r\n\t\t\t\t\t[leftWingPoint.lat, leftWingPoint.lng],\r\n\t\t\t\t\t[derivedLatLngs[i].lat, derivedLatLngs[i].lng],\r\n\t\t\t\t\t[rightWingPoint.lat, rightWingPoint.lng],\r\n\t\t\t\t];\r\n\r\n\t\t\t\tlet hat = options.fill\r\n\t\t\t\t\t? L.polygon(hatPoints, { ...hatOptions, ...localHatOptions })\r\n\t\t\t\t\t: L.polyline(hatPoints, { ...hatOptions, ...localHatOptions });\r\n\r\n\t\t\t\thats.push(hat);\r\n\t\t\t}; // pushHats()\r\n\r\n\t\t\t// Function to build hats based on pixel input\r\n\t\t\tconst pushHatsFromPixels = (size, localHatOptions = {}) => {\r\n\t\t\t\tlet sizePixels = size.slice(0, size.length - 2);\r\n\t\t\t\tlet yawn = localHatOptions.yawn ?? options.yawn;\r\n\r\n\t\t\t\tlet derivedXY = this._map.latLngToLayerPoint(derivedLatLngs[i]);\r\n\r\n\t\t\t\tlet bearing = derivedBearings[i];\r\n\r\n\t\t\t\tlet thetaLeft = (180 - bearing - yawn / 2) * (Math.PI / 180),\r\n\t\t\t\t\tthetaRight = (180 - bearing + yawn / 2) * (Math.PI / 180);\r\n\r\n\t\t\t\tlet dxLeft = sizePixels * Math.sin(thetaLeft),\r\n\t\t\t\t\tdyLeft = sizePixels * Math.cos(thetaLeft),\r\n\t\t\t\t\tdxRight = sizePixels * Math.sin(thetaRight),\r\n\t\t\t\t\tdyRight = sizePixels * Math.cos(thetaRight);\r\n\r\n\t\t\t\tlet leftWingXY = {\r\n\t\t\t\t\tx: derivedXY.x + dxLeft,\r\n\t\t\t\t\ty: derivedXY.y + dyLeft,\r\n\t\t\t\t};\r\n\t\t\t\tlet rightWingXY = {\r\n\t\t\t\t\tx: derivedXY.x + dxRight,\r\n\t\t\t\t\ty: derivedXY.y + dyRight,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet leftWingPoint = this._map.layerPointToLatLng(leftWingXY),\r\n\t\t\t\t\trightWingPoint = this._map.layerPointToLatLng(rightWingXY);\r\n\r\n\t\t\t\tlet hatPoints = [\r\n\t\t\t\t\t[leftWingPoint.lat, leftWingPoint.lng],\r\n\t\t\t\t\t[derivedLatLngs[i].lat, derivedLatLngs[i].lng],\r\n\t\t\t\t\t[rightWingPoint.lat, rightWingPoint.lng],\r\n\t\t\t\t];\r\n\r\n\t\t\t\tlet hat = options.fill\r\n\t\t\t\t\t? L.polygon(hatPoints, { ...hatOptions, ...localHatOptions })\r\n\t\t\t\t\t: L.polyline(hatPoints, { ...hatOptions, ...localHatOptions });\r\n\r\n\t\t\t\thats.push(hat);\r\n\t\t\t}; // pushHatsFromPixels()\r\n\r\n\t\t\t//  -------  LOOP THROUGH POINTS IN EACH SEGMENT ---------- //\r\n\t\t\tfor (var i = 0; i < derivedLatLngs.length; i++) {\r\n\t\t\t\tlet { perArrowheadOptions, ...globalOptions } = options;\r\n\r\n\t\t\t\tperArrowheadOptions = perArrowheadOptions ? perArrowheadOptions(i) : {};\r\n\t\t\t\tperArrowheadOptions = Object.assign(\r\n\t\t\t\t\tglobalOptions,\r\n\t\t\t\t\tdefinedProps(perArrowheadOptions)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tsize = perArrowheadOptions.size ?? size;\r\n\r\n\t\t\t\t// ---- If size is chosen in meters -------------------------\r\n\t\t\t\tif (isInMeters(size)) {\r\n\t\t\t\t\tlet hatSize = size.slice(0, size.length - 1);\r\n\t\t\t\t\tpushHats(hatSize, perArrowheadOptions);\r\n\r\n\t\t\t\t\t// ---- If size is chosen in percent ------------------------\r\n\t\t\t\t} else if (isInPercent(size)) {\r\n\t\t\t\t\tlet sizePercent = size.slice(0, size.length - 1);\r\n\t\t\t\t\tlet hatSize = (() => {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\toptions.frequency === 'endonly' &&\r\n\t\t\t\t\t\t\toptions.proportionalToTotal\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn (totalLength * sizePercent) / 100;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet averageDistance = totalLength / (peice.length - 1);\r\n\t\t\t\t\t\t\treturn (averageDistance * sizePercent) / 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})(); // hatsize calculation\r\n\r\n\t\t\t\t\tpushHats(hatSize, perArrowheadOptions);\r\n\r\n\t\t\t\t\t// ---- If size is chosen in pixels --------------------------\r\n\t\t\t\t} else if (isInPixels(size)) {\r\n\t\t\t\t\tpushHatsFromPixels(options.size, perArrowheadOptions);\r\n\r\n\t\t\t\t\t// ---- If size unit is not given -----------------------------\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t'Error: Arrowhead size unit not defined.  Check your arrowhead options.'\r\n\t\t\t\t\t);\r\n\t\t\t\t} // if else block for Size\r\n\t\t\t} // for loop for each point witin a peice\r\n\r\n\t\t\tallhats.push(...hats);\r\n\t\t}); // forEach peice\r\n\r\n\t\t//  --------- LOOP THROUGH EACH POLYLINE END ---------------- //\r\n\t\t//  --------------------------------------------------------- //\r\n\r\n\t\tlet arrowheads = L.layerGroup(allhats);\r\n\t\tthis._arrowheads = arrowheads;\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tgetArrowheads: function () {\r\n\t\tif (this._arrowheads) {\r\n\t\t\treturn this._arrowheads;\r\n\t\t} else {\r\n\t\t\treturn console.error(\r\n\t\t\t\t`Error: You tried to call '.getArrowheads() on a shape that does not have a arrowhead.  Use '.arrowheads()' to add a arrowheads before trying to call '.getArrowheads()'`\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Builds ghost polylines that are clipped versions of the polylines based on the offsets\r\n\t * If offsets are used, arrowheads are drawn from 'this._ghosts' rather than 'this'\r\n\t */\r\n\t_buildGhosts: function ({ start, end }) {\r\n\t\tif (start || end) {\r\n\t\t\tlet latlngs = this.getLatLngs();\r\n\r\n\t\t\tlatlngs = Array.isArray(latlngs[0]) ? latlngs : [latlngs];\r\n\r\n\t\t\tconst newLatLngs = latlngs.map((segment) => {\r\n\t\t\t\t// Get total distance of original latlngs\r\n\t\t\t\tconst totalLength = (() => {\r\n\t\t\t\t\tlet total = 0;\r\n\t\t\t\t\tfor (var i = 0; i < segment.length - 1; i++) {\r\n\t\t\t\t\t\ttotal += this._map.distance(segment[i], segment[i + 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn total;\r\n\t\t\t\t})();\r\n\r\n\t\t\t\t// Modify latlngs to end at interpolated point\r\n\t\t\t\tif (start) {\r\n\t\t\t\t\tlet endOffsetInMeters = (() => {\r\n\t\t\t\t\t\tif (isInMeters(start)) {\r\n\t\t\t\t\t\t\treturn Number(start.slice(0, start.length - 1));\r\n\t\t\t\t\t\t} else if (isInPixels(start)) {\r\n\t\t\t\t\t\t\tlet pixels = Number(start.slice(0, start.length - 2));\r\n\t\t\t\t\t\t\treturn pixelsToMeters(pixels, this._map);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})();\r\n\r\n\t\t\t\t\tlet newStart = L.GeometryUtil.interpolateOnLine(\r\n\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\tsegment,\r\n\t\t\t\t\t\tendOffsetInMeters / totalLength\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsegment = segment.slice(\r\n\t\t\t\t\t\tnewStart.predecessor === -1 ? 1 : newStart.predecessor + 1,\r\n\t\t\t\t\t\tsegment.length\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsegment.unshift(newStart.latLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (end) {\r\n\t\t\t\t\tlet endOffsetInMeters = (() => {\r\n\t\t\t\t\t\tif (isInMeters(end)) {\r\n\t\t\t\t\t\t\treturn Number(end.slice(0, end.length - 1));\r\n\t\t\t\t\t\t} else if (isInPixels(end)) {\r\n\t\t\t\t\t\t\tlet pixels = Number(end.slice(0, end.length - 2));\r\n\t\t\t\t\t\t\treturn pixelsToMeters(pixels, this._map);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})();\r\n\r\n\t\t\t\t\tlet newEnd = L.GeometryUtil.interpolateOnLine(\r\n\t\t\t\t\t\tthis._map,\r\n\t\t\t\t\t\tsegment,\r\n\t\t\t\t\t\t(totalLength - endOffsetInMeters) / totalLength\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsegment = segment.slice(0, newEnd.predecessor + 1);\r\n\t\t\t\t\tsegment.push(newEnd.latLng);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn segment;\r\n\t\t\t});\r\n\r\n\t\t\tthis._ghosts = L.polyline(newLatLngs, {\r\n\t\t\t\t...this.options,\r\n\t\t\t\tcolor: 'rgba(0,0,0,0)',\r\n\t\t\t\tstroke: 0,\r\n\t\t\t\tsmoothFactor: 0,\r\n\t\t\t\tinteractive: false,\r\n\t\t\t});\r\n\t\t\tthis._ghosts.addTo(this._map);\r\n\t\t}\r\n\t},\r\n\r\n\tdeleteArrowheads: function () {\r\n\t\tif (this._arrowheads) {\r\n\t\t\tthis._arrowheads.remove();\r\n\t\t\tdelete this._arrowheads;\r\n\t\t\tdelete this._arrowheadOptions;\r\n\t\t\tthis._hatsApplied = false;\r\n\t\t}\r\n\t\tif (this._ghosts) {\r\n\t\t\tthis._ghosts.remove();\r\n\t\t}\r\n\t},\r\n\r\n\t_update: function () {\r\n\t\tif (!this._map) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._clipPoints();\r\n\t\tthis._simplifyPoints();\r\n\t\tthis._updatePath();\r\n\r\n\t\tif (this._hatsApplied) {\r\n\t\t\tthis.buildVectorHats(this._arrowheadOptions);\r\n\t\t\tthis._map.addLayer(this._arrowheads);\r\n\t\t}\r\n\t},\r\n\r\n\tremove: function () {\r\n\t\tif (this._arrowheads) {\r\n\t\t\tthis._arrowheads.remove();\r\n\t\t}\r\n\t\tif (this._ghosts) {\r\n\t\t\tthis._ghosts.remove();\r\n\t\t}\r\n\t\treturn this.removeFrom(this._map || this._mapToAdd);\r\n\t},\r\n});\r\n\r\nL.LayerGroup.include({\r\n\tremoveLayer: function (layer) {\r\n\t\tvar id = layer in this._layers ? layer : this.getLayerId(layer);\r\n\r\n\t\tif (this._map && this._layers[id]) {\r\n\t\t\tif (this._layers[id]._arrowheads) {\r\n\t\t\t\tthis._layers[id]._arrowheads.remove();\r\n\t\t\t}\r\n\t\t\tthis._map.removeLayer(this._layers[id]);\r\n\t\t}\r\n\r\n\t\tdelete this._layers[id];\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tonRemove: function (map, layer) {\r\n\t\tfor (var layer in this._layers) {\r\n\t\t\tif (this._layers[layer]) {\r\n\t\t\t\tthis._layers[layer].remove();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.eachLayer(map.removeLayer, map);\r\n\t},\r\n});\r\n\r\nL.Map.include({\r\n\tremoveLayer: function (layer) {\r\n\t\tvar id = L.Util.stamp(layer);\r\n\r\n\t\tif (layer._arrowheads) {\r\n\t\t\tlayer._arrowheads.remove();\r\n\t\t}\r\n\t\tif (layer._ghosts) {\r\n\t\t\tlayer._ghosts.remove();\r\n\t\t}\r\n\r\n\t\tif (!this._layers[id]) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tif (this._loaded) {\r\n\t\t\tlayer.onRemove(this);\r\n\t\t}\r\n\r\n\t\tif (layer.getAttribution && this.attributionControl) {\r\n\t\t\tthis.attributionControl.removeAttribution(layer.getAttribution());\r\n\t\t}\r\n\r\n\t\tdelete this._layers[id];\r\n\r\n\t\tif (this._loaded) {\r\n\t\t\tthis.fire('layerremove', { layer: layer });\r\n\t\t\tlayer.fire('remove');\r\n\t\t}\r\n\r\n\t\tlayer._map = layer._mapToAdd = null;\r\n\r\n\t\treturn this;\r\n\t},\r\n});\r\n\r\nL.GeoJSON.include({\r\n\tgeometryToLayer: function (geojson, options) {\r\n\t\tvar geometry = geojson.type === 'Feature' ? geojson.geometry : geojson,\r\n\t\t\tcoords = geometry ? geometry.coordinates : null,\r\n\t\t\tlayers = [],\r\n\t\t\tpointToLayer = options && options.pointToLayer,\r\n\t\t\t_coordsToLatLng =\r\n\t\t\t\t(options && options.coordsToLatLng) || L.GeoJSON.coordsToLatLng,\r\n\t\t\tlatlng,\r\n\t\t\tlatlngs,\r\n\t\t\ti,\r\n\t\t\tlen;\r\n\r\n\t\tif (!coords && !geometry) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tswitch (geometry.type) {\r\n\t\t\tcase 'Point':\r\n\t\t\t\tlatlng = _coordsToLatLng(coords);\r\n\t\t\t\treturn this._pointToLayer(pointToLayer, geojson, latlng, options);\r\n\r\n\t\t\tcase 'MultiPoint':\r\n\t\t\t\tfor (i = 0, len = coords.length; i < len; i++) {\r\n\t\t\t\t\tlatlng = _coordsToLatLng(coords[i]);\r\n\t\t\t\t\tlayers.push(\r\n\t\t\t\t\t\tthis._pointToLayer(pointToLayer, geojson, latlng, options)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn new L.FeatureGroup(layers);\r\n\r\n\t\t\tcase 'LineString':\r\n\t\t\tcase 'MultiLineString':\r\n\t\t\t\tlatlngs = L.GeoJSON.coordsToLatLngs(\r\n\t\t\t\t\tcoords,\r\n\t\t\t\t\tgeometry.type === 'LineString' ? 0 : 1,\r\n\t\t\t\t\t_coordsToLatLng\r\n\t\t\t\t);\r\n\t\t\t\tvar polyline = new L.Polyline(latlngs, options);\r\n\t\t\t\tif (options.arrowheads) {\r\n\t\t\t\t\tpolyline.arrowheads(options.arrowheads);\r\n\t\t\t\t}\r\n\t\t\t\treturn polyline;\r\n\r\n\t\t\tcase 'Polygon':\r\n\t\t\tcase 'MultiPolygon':\r\n\t\t\t\tlatlngs = L.GeoJSON.coordsToLatLngs(\r\n\t\t\t\t\tcoords,\r\n\t\t\t\t\tgeometry.type === 'Polygon' ? 1 : 2,\r\n\t\t\t\t\t_coordsToLatLng\r\n\t\t\t\t);\r\n\t\t\t\treturn new L.Polygon(latlngs, options);\r\n\r\n\t\t\tcase 'GeometryCollection':\r\n\t\t\t\tfor (i = 0, len = geometry.geometries.length; i < len; i++) {\r\n\t\t\t\t\tvar layer = this.geometryToLayer(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgeometry: geometry.geometries[i],\r\n\t\t\t\t\t\t\ttype: 'Feature',\r\n\t\t\t\t\t\t\tproperties: geojson.properties,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\toptions\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (layer) {\r\n\t\t\t\t\t\tlayers.push(layer);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn new L.FeatureGroup(layers);\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error('Invalid GeoJSON object.');\r\n\t\t}\r\n\t},\r\n\r\n\taddData: function (geojson) {\r\n\t\tvar features = L.Util.isArray(geojson) ? geojson : geojson.features,\r\n\t\t\ti,\r\n\t\t\tlen,\r\n\t\t\tfeature;\r\n\r\n\t\tif (features) {\r\n\t\t\tfor (i = 0, len = features.length; i < len; i++) {\r\n\t\t\t\t// only add this if geometry or geometries are set and not null\r\n\t\t\t\tfeature = features[i];\r\n\t\t\t\tif (\r\n\t\t\t\t\tfeature.geometries ||\r\n\t\t\t\t\tfeature.geometry ||\r\n\t\t\t\t\tfeature.features ||\r\n\t\t\t\t\tfeature.coordinates\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.addData(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tvar options = this.options;\r\n\r\n\t\tif (options.filter && !options.filter(geojson)) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tvar layer = this.geometryToLayer(geojson, options);\r\n\t\tif (!layer) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tlayer.feature = L.GeoJSON.asFeature(geojson);\r\n\r\n\t\tlayer.defaultOptions = layer.options;\r\n\t\tthis.resetStyle(layer);\r\n\r\n\t\tif (options.onEachFeature) {\r\n\t\t\toptions.onEachFeature(geojson, layer);\r\n\t\t}\r\n\r\n\t\treturn this.addLayer(layer);\r\n\t},\r\n\r\n\t_pointToLayer: function (pointToLayerFn, geojson, latlng, options) {\r\n\t\treturn pointToLayerFn\r\n\t\t\t? pointToLayerFn(geojson, latlng)\r\n\t\t\t: new L.Marker(\r\n\t\t\t\t\tlatlng,\r\n\t\t\t\t\toptions && options.markersInheritOptions && options\r\n\t\t\t  );\r\n\t},\r\n});"],"names":[],"version":3,"file":"index.bdae0c02.js.map","sourceRoot":"/__parcel_source_root/"}