{"version":3,"file":"static/js/628.df6384f8.chunk.js","mappings":"4wg1sBAIA,MAWMA,EAAkBC,IAAwB,IAAvB,cAAEC,GAAeD,EACxC,MAAOE,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,CAAC,GAElCG,GAAMC,EAAAA,EAAAA,OAGZC,EAAAA,EAAAA,YAAU,KACRN,EAAU,IACLO,OAAOC,KAAKV,GAAeW,QAAQC,GAASZ,EAAcY,MAC7D,GACD,CAACZ,KAGJQ,EAAAA,EAAAA,YAAU,KACR,MAAMK,EAAmBC,EAAAA,EAAkBH,QACxCI,GAAYd,EAAOe,QAAQD,EAAoB,WAAW,UAAM,IAEnEV,EAAW,IAAKD,EAASa,SAAUJ,GAAmB,GACrD,CAACZ,IAGJ,MAAMiB,EAAgBC,GACP,mBAATA,GAAsC,iBAATA,EAAgC,UAC/C,yBAATA,GAA4C,cAATA,EACnC,SACS,kBAATA,GAAqC,gBAATA,EAC5B,UACgC,UAKrCC,EAAiBL,IACrB,MAAMI,EAAOJ,EAAQM,WAAWC,QAEhC,MAAO,CACLC,UAAWL,EAAaC,GACxBK,OAAQ,IACRC,QAAS,EACTC,MAAO,QACPC,UAAW,IACXC,YAAa,GACd,EAsBGC,EAAoBC,IACVA,EAAEC,OACVC,SAAS,CACbR,OAAQ,EACRG,UAAW,GACXC,YAAa,IACb,EAIEK,EAAkBH,IACtB,MAAMI,EAAQJ,EAAEC,OACVzB,EAAM4B,EAAMC,KACd7B,EAAI8B,aACN9B,EAAI8B,YAAYC,SAElBH,EAAMF,SAASZ,EAAcc,EAAMnB,SAAS,EAIxCuB,EAAwBA,CAACvB,EAASmB,KAtClBK,EAACxB,EAASmB,KAC9BA,EAAMM,YACH,6EAEazB,EAAQM,WAAWoB,WAAW1B,EAAQM,WAAWC,yGAGjDP,EAAQM,WAAWqB,8EAGjC,CACEC,QAAQ,EACRC,UAAW,kBAEd,EAyBDL,CAAcxB,EAASmB,GACvBA,EAAMW,GAAG,CACPC,UAAWjB,EACXkB,SAAUd,GACV,GAIJzB,EAAAA,EAAAA,YAAU,KACR,GAAIC,OAAOC,KAAKN,GAAS4C,OAAS,EAAG,CACnC,MAAMC,EAAeC,IAAAA,QAAU9C,EAAS,CACtC+C,MAAO/B,EACPmB,cAAeD,IAKnB,OAHEW,EAAaG,MAAM9C,GACnB2C,EAAaI,cAER,KACL/C,EAAIgD,YAAYL,EAAa,CAEjC,IACG,CAAC7C,IAGJ,MAAMmD,EAAiBA,MACrB/C,EAAAA,EAAAA,YAAU,KACR,MAAMgD,EAAiBN,IAAAA,QAAU,CAAEO,SAAU,gBA8D7C,OA5DAD,EAAeE,MAAQ,KACrB,MAAMC,EAAMT,IAAAA,QAAUU,OAAO,MAAO,eAC9BC,EAAS,CACb,iBACA,YACA,gBACA,eACA,uBACA,cACA,gBAEIC,EAAU,CACd,UACA,SACA,UACA,UACA,SACA,UACA,WAEIC,EAAU,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAK3DJ,EAAIK,mBAAmB,aAAc,gCACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOb,OAAQiB,IACd,QAAfF,EAAQE,IACVN,EAAIK,mBACF,YACC,yBAAwBF,EAAQG,aAAaJ,EAAOI,WAG3DN,EAAIK,mBAAmB,YAAa,QAGpCL,EAAIK,mBAAmB,YAAa,8BACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOb,OAAQiB,IACd,QAAfF,EAAQE,IACVN,EAAIK,mBACF,YACC,yBAAwBF,EAAQG,aAAaJ,EAAOI,WAG3DN,EAAIK,mBAAmB,YAAa,QAGpCL,EAAIK,mBAAmB,YAAa,iCACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOb,OAAQiB,IACd,QAAfF,EAAQE,IACVN,EAAIK,mBACF,YACC,yBAAwBF,EAAQG,aAAaJ,EAAOI,WAE3D,OAAON,CAAG,EAGZH,EAAeJ,MAAM9C,GAGd,KACLA,EAAI4D,cAAcV,EAAe,CAClC,IAGI,MAGT,OAAOW,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAGpE,EAAO+C,OAAS,IAAKmB,EAAAA,EAAAA,KAACZ,EAAc,KAAO,EAGvD,EApMmBe,IAAwB,IAAvB,cAAEtE,GAAesE,EACnC,OACEH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACG5D,OAAO8D,OAAOvE,GAAegD,OAAS,GACrCvC,OAAO8D,OAAOvE,GAAeW,QAAQuB,GAAUA,IAAOc,OAAS,IAC7DmB,EAAAA,EAAAA,KAACrE,EAAe,CAACE,cAAeA,KAEnC,C","sources":["components/Layers/RiskLayers.jsx"],"sourcesContent":["import { useMap } from \"react-leaflet\";\nimport { useEffect, useState } from \"react\";\nimport AllRA from \"../../data/riskAreas.json\";\nimport L from \"leaflet\";\nconst RiskLayers = ({ checkedLayers }) => {\n  return (\n    <>\n      {Object.values(checkedLayers).length > 0 &&\n        Object.values(checkedLayers).filter((layer) => layer).length > 0 && (\n          <RiskLayersModel checkedLayers={checkedLayers} />\n        )}\n    </>\n  );\n};\n\nconst RiskLayersModel = ({ checkedLayers }) => {\n  const [layers, setLayers] = useState([]);\n  const [geoJson, setGeoJson] = useState({});\n\n  const map = useMap();\n\n  //Update `layers` (array) state whenever `checkedLayers` object changes\n  useEffect(() => {\n    setLayers([\n      ...Object.keys(checkedLayers).filter((elem) => checkedLayers[elem]),\n    ]);\n  }, [checkedLayers]);\n\n  //Update geoJson by filtering the features array in AllRA, keeping only the features where the TB_Area property exists in the layers array.\n  useEffect(() => {\n    const selectedFeatures = AllRA[\"features\"].filter(\n      (feature) => layers.indexOf(feature[\"properties\"][\"TB_Area\"]) >= 0\n    );\n    setGeoJson({ ...geoJson, features: selectedFeatures });\n  }, [layers]);\n\n  //Function to set polygon colours for Risk Areas\n  const riskAreaCols = (area) => {\n    if (area === \"High Risk Area\" || area === \"High TB Area\") return \"#C62828\";\n    else if (area === \"Intermediate TB Area\" || area === \"Edge Area\")\n      return \"orange\";\n    else if (area === \"Low Risk Area\" || area === \"Low TB Area\")\n      return \"#00C853\";\n    else if (area === \"TB Free Area\") return \"#CFD8DC\";\n    return \"#CFD8DC\";\n  };\n\n  //Function to set custom styles for each feature (TB area). \"feature\" object is obtained from geoJSON.\n  const styleRiskArea = (feature) => {\n    const area = feature.properties.TB_Area;\n\n    return {\n      fillColor: riskAreaCols(area),\n      weight: 1.5,\n      opacity: 1,\n      color: \"white\",\n      dashArray: \"3\",\n      fillOpacity: 0.5,\n    };\n  };\n\n  //Function using Leaflet bindTooltip to create a tooltip on each feature (TB area)\n  const onEachFeature = (feature, layer) => {\n    layer.bindTooltip(\n      `<div>\n                  <div style=\"font-size: 14px\">\n                  ${feature.properties.Country} ${feature.properties.TB_Area}\n                  </div>\n                  <div style=\"font-size: 12px\">\n                  ${feature.properties.Testing__1} ${\"months testing\"}\n                  </div>\n                </div>`,\n      {\n        sticky: true,\n        className: \"custom-tooltip\",\n      }\n    );\n  };\n\n  //Function to highlight each feature (TB area)\n  const highlightFeature = (e) => {\n    const layer = e.target;\n    layer.setStyle({\n      weight: 3,\n      dashArray: \"\",\n      fillOpacity: 0.7,\n    });\n  };\n\n  //Function to reset highlighting each feature (TB area)\n  const resetHighlight = (e) => {\n    const layer = e.target;\n    const map = layer._map;\n    if (map.infoControl) {\n      map.infoControl.update();\n    }\n    layer.setStyle(styleRiskArea(layer.feature));\n  };\n\n  // Function to add `highlightFeature` and `resetHighlight` on mouseover/out on each feature (TB area)\n  const onEachFeatureCombined = (feature, layer) => {\n    onEachFeature(feature, layer);\n    layer.on({\n      mouseover: highlightFeature,\n      mouseout: resetHighlight,\n    });\n  };\n\n  //Create GeoJSON layer using Leaflets' `L.geoJSON` method & geoJson data\n  useEffect(() => {\n    if (Object.keys(geoJson).length > 0) {\n      const geoJsonLayer = L.geoJSON(geoJson, {\n        style: styleRiskArea,\n        onEachFeature: onEachFeatureCombined,\n      });\n      geoJsonLayer.addTo(map);\n      geoJsonLayer.bringToBack();\n    \n    return () => {\n      map.removeLayer(geoJsonLayer);\n    };\n  }\n  }, [geoJson]);\n\n  // Legend for Risk Areas (https://leafletjs.com/examples/choropleth/)\n  const RiskAreaLegend = () => {\n    useEffect(() => {\n      const riskareaLegend = L.control({ position: \"bottomright\" });\n\n      riskareaLegend.onAdd = () => {\n        const div = L.DomUtil.create(\"div\", \"info legend\");\n        const levels = [\n          \"High Risk Area\",\n          \"Edge Area\",\n          \"Low Risk Area\",\n          \"High TB Area\",\n          \"Intermediate TB Area\",\n          \"Low TB Area\",\n          \"TB Free Area\",\n        ];\n        const colours = [\n          \"#C62828\",\n          \"orange\",\n          \"#00C853\",\n          \"#C62828\",\n          \"orange\",\n          \"#00C853\",\n          \"#CFD8DC\",\n        ];\n        const country = [\"ENG\", \"ENG\", \"ENG\", \"WAL\", \"WAL\", \"WAL\", \"SCO\"];\n\n        // Build legend: loop through levels and generate a label with a colored square\n\n        // England\n        div.insertAdjacentHTML(\"afterbegin\", \"<strong>England</strong><br>\");\n        for (let i = 0; i < levels.length; i++)\n          if (country[i] === \"ENG\")\n            div.insertAdjacentHTML(\n              \"beforeend\",\n              `<i style=\"background: ${colours[i]};\"></i> ${levels[i]} <br>`\n            );\n\n        div.insertAdjacentHTML(\"beforeend\", \"<br>\");\n\n        // Wales\n        div.insertAdjacentHTML(\"beforeend\", \"<strong>Wales</strong><br>\");\n        for (let i = 0; i < levels.length; i++)\n          if (country[i] === \"WAL\")\n            div.insertAdjacentHTML(\n              \"beforeend\",\n              `<i style=\"background: ${colours[i]};\"></i> ${levels[i]} <br>`\n            );\n\n        div.insertAdjacentHTML(\"beforeend\", \"<br>\");\n\n        // Scotland\n        div.insertAdjacentHTML(\"beforeend\", \"<strong>Scotland</strong><br>\");\n        for (let i = 0; i < levels.length; i++)\n          if (country[i] === \"SCO\")\n            div.insertAdjacentHTML(\n              \"beforeend\",\n              `<i style=\"background: ${colours[i]};\"></i> ${levels[i]} <br>`\n            );\n        return div;\n      };\n\n      riskareaLegend.addTo(map);\n\n      // Cleanup function to remove the legend when the component unmounts\n      return () => {\n        map.removeControl(riskareaLegend);\n      };\n    });\n\n    return null;\n  };\n\n  return <>{layers.length > 0 && <RiskAreaLegend />}</>;\n};\n\nexport default RiskLayers;\n"],"names":["RiskLayersModel","_ref2","checkedLayers","layers","setLayers","useState","geoJson","setGeoJson","map","useMap","useEffect","Object","keys","filter","elem","selectedFeatures","AllRA","feature","indexOf","features","riskAreaCols","area","styleRiskArea","properties","TB_Area","fillColor","weight","opacity","color","dashArray","fillOpacity","highlightFeature","e","target","setStyle","resetHighlight","layer","_map","infoControl","update","onEachFeatureCombined","onEachFeature","bindTooltip","Country","Testing__1","sticky","className","on","mouseover","mouseout","length","geoJsonLayer","L","style","addTo","bringToBack","removeLayer","RiskAreaLegend","riskareaLegend","position","onAdd","div","create","levels","colours","country","insertAdjacentHTML","i","removeControl","_jsx","_Fragment","children","_ref","values"],"sourceRoot":""}