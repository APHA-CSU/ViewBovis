{"version":3,"file":"static/js/88.b5812e10.chunk.js","mappings":"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","sources":["imgs/SNPsoi.svg","imgs/SNPrelated.svg","components/SNPDistance/SNPLayers.jsx","components/SNPDistance/SNPMapComp.jsx"],"sourcesContent":["var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSnPsoi(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 103,\n    height: 126,\n    viewBox: \"0 0 103 126\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M83.6875 63C83.6875 91.556 56.013 110.037 51.9863 112.575C51.6771 112.77 51.3229 112.77 51.0137 112.575C46.987 110.037 19.3125 91.556 19.3125 63C19.3125 39.375 34.9084 23.625 51.5 23.625C68.6667 23.625 83.6875 39.375 83.6875 63Z\",\n    fill: \"#C95300\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.1667 63C68.1667 74.4208 60.6152 83.5 51.5 83.5C42.3847 83.5 34.8333 74.4208 34.8333 63C34.8333 51.5792 42.3847 42.5 51.5 42.5C60.6152 42.5 68.1667 51.5792 68.1667 63Z\",\n    fill: \"white\",\n    stroke: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSnPsoi);\nexport default __webpack_public_path__ + \"static/media/SNPsoi.9c9a73af37ef4ab3fbcb1a7e586ef58c.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSnPrelated(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 16,\n    height: 16,\n    fill: \"#575757\",\n    className: \"bi bi-geo-alt-fill\",\n    viewBox: \"0 0 16 16\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSnPrelated);\nexport default __webpack_public_path__ + \"static/media/SNPrelated.3d6ef995b712704d8be98d53fc8be63f.svg\";\nexport { ForwardRef as ReactComponent };","import L from 'leaflet';\nimport SNPsoi from '../../imgs/SNPsoi.svg'\nimport SNPrelated from '../../imgs/SNPrelated.svg'\n\nconst markerNumberIcon = (number) => {\n  return `\n  <div style=\"font-size: medium;\n  color: white;\n  font-weight: 500;\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  align-content: center;\n  justify-content: center;\n  align-items: center;\n\"><img src=\"${SNPrelated}\" alt=\"${number}\" width=\"30\" height=\"30\"/>\n<a style=\"position: absolute;\">${number}</a><div/>`\n}\n\nconst relatedMarker = (props, SOI) => { \nif(props.submission === SOI) {\n  return new L.Icon({\n    className: `number-marker marker-SOI marker-${props.submission}`,\n    iconUrl: SNPsoi,\n    iconSize: [40, 40],\n    iconAnchor: [20, 35],\n  })} else {\n    return new L.DivIcon({\n      className : `number-marker-related marker-${props.submission}`,\n      html : markerNumberIcon(props.snp_distance),\n      styles : {border: \"none\",\n      background: \"transparent\", display : \"flex\"},\n      iconSize: [40, 40],\n      iconAnchor: [20, 28],\n    })\n  }\n}\nexport { relatedMarker };","import { MapContainer, Marker, TileLayer, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { relatedMarker } from \"./SNPLayers\";\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\nimport RiskLayers from \"../Layers/RiskLayers\";\nimport CountyLayers from \"../Layers/CountyLayers\";\nimport HotspotLayers from \"../Layers/HotspotLayers\";\nimport React, { useEffect, useRef } from \"react\";\nimport L from \"leaflet\";\nimport HideSidebar from \"../MapControls/HideSidebar\";\nimport MeasurementTool from \"../MapControls/MeasurementTool\";\nimport ResetView from \"../MapControls/ResetView\";\nimport SNPsoi from \"../../imgs/SNPsoi.svg\";\nimport SNPrelated from \"../../imgs/SNPrelated.svg\";\nimport movementClusterImg from \"../../imgs/movementCluster.svg\";\nimport BaseMaps from \"../MapControls/Basemaps\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleSNPTable } from \"./../../features/counter/counterSlice.js\";\n\nconst SNPMapComp = React.memo(({\n  checkedLayers,\n  useCountyandHotspotLayers,\n  setOpenSideBar,\n  openSideBar,\n  SNPMapDataset,\n}) => {\n  //SNP map cluster icon\n  const openTable = useSelector((state) => state.counter.openSNPTable);\n  const mapRef = useRef(null);\n  const createCustomClusterIcon = (cluster) => {\n    return new L.DivIcon({\n      html: `<span class=\"cluster-icon\">${cluster.getChildCount()}</span>`,\n      className: \"cluster-icon\",\n      iconSize: [30, 30],\n    });\n  };\n\n  const popupContentSNPMap = function (data, AFnumber) {\n    return `\n      <div class=\"fs-5 fw-bold\">${data.animal_id}</div><br>\n        <div id=\"popTabContent\">     \n          <table class=\"table table-striped\">\n            <tbody>\n              <tr>\n                <td><strong>Submission:</strong></td>\n                <td>${AFnumber}</td> \n              </tr>\n              <tr>\n                <td><strong>Date of Birth:</strong></td>\n                <td>${data.dob}</td>\n              </tr>\n              <tr>\n                <td><strong>Slaughter Date:</strong></td>\n                <td>${data.slaughter_date}</td>\n              </tr>\n              <tr>\n                <td><strong>Miles:</strong></td>\n                <td>${parseFloat(data.distance).toFixed(2)}</td>\n              </tr>\n              <tr>\n                <td><strong>SNP Distance:</strong></td>\n                <td>${data.snp_distance}</td>\n              </tr>\n              <tr>\n                <td><strong>Precise Location:</strong></td>\n                <td>${data.cph}</td> \n              </tr>\n              <tr>\n                <td><strong>OS Map Reference:</strong></td>\n                <td>${data.os_map_ref}</td>\n              </tr>\n              <tr>\n                <td><strong>Species:</strong></td>\n                <td>${data.species}</td> \n              </tr>\n              <tr>\n                <td><strong>Animal Type:</strong></td>\n                <td>${data.animal_type}</td> \n              </tr>\n              <tr>\n                <td><strong>Sex:</strong></td>\n                <td>${\n                  data.sex === `F`\n                    ? `Female`\n                    : data.sex === `M`\n                    ? `Male`\n                    : `Unknown`\n                }\n                </td>\n              </tr> \n              <tr>\n                <td><strong>Disclosing Test Type:</strong></td>\n                <td>${data.disclosing_test}</td>\n              </tr> \n              <tr>\n                <td><strong>Import Country:</strong></td>\n                <td>${\n                  data.import_country == null\n                    ? `British`\n                    : `${data.import_country}`\n                }</td>\n              </tr> \n            </tbody>\n          </table>\n        </div>\n      </div>        \n      `;\n  };\n\n  const popupOptions = {\n    maxWidth: 400, // in pixels\n    className: \"relatedPopupOptions\", // must match a css class\n    autoClose: false,\n    closeOnClick: false,\n    maxHeight: 300,\n  };\n\n  return (\n    <div ref={mapRef}>\n      <MapContainer\n        center={[53.3781, -1]}\n        zoom={6}\n        zoomAnimation={true}\n        zoomAnimationThreshold={20}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">\n          OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <BaseMaps />\n        <ResetView />\n        <HideSidebar\n          setOpenSideBar={setOpenSideBar}\n          openSideBar={openSideBar}\n          type={\"snp_map\"}\n        />\n        <MeasurementTool />\n        <HotspotLayers isChecked={useCountyandHotspotLayers[\"hotspotLayers\"]} />\n        <CountyLayers isChecked={useCountyandHotspotLayers[\"countyLayers\"]} />\n        {Object.keys(checkedLayers).length > 0 && (\n          <RiskLayers checkedLayers={checkedLayers} />\n        )}\n        <LegendTableAction\n          SNPMapDataset={SNPMapDataset}\n          openTable={openTable}\n          mapRef={mapRef}\n        />\n        {!openTable && (\n          <MarkerClusterGroup\n            chunkedLoading\n            iconCreateFunction={createCustomClusterIcon}\n          >\n            {Object.keys(SNPMapDataset)\n              .filter((elem) => {\n                return elem !== \"SOI\" && elem !== SNPMapDataset[\"SOI\"];\n              })\n              .map((elem, index) => {\n                return (\n                  <Marker\n                    ref={(ref) => {\n                      ref?.bindPopup(\n                        popupContentSNPMap({ ...SNPMapDataset[elem] }, elem),\n                        popupOptions\n                      );\n                    }}\n                    icon={relatedMarker(\n                      { ...SNPMapDataset[elem], submission: elem },\n                      SNPMapDataset[\"SOI\"]\n                    )}\n                    key={\"snp_related_marker_\" + index}\n                    position={[\n                      SNPMapDataset[elem].lat,\n                      SNPMapDataset[elem].lon,\n                    ]}\n                  ></Marker>\n                );\n              })}\n          </MarkerClusterGroup>\n        )}\n        {openTable && (\n          <>\n            {Object.keys(SNPMapDataset)\n              .filter((elem) => {\n                return elem !== \"SOI\" && elem !== SNPMapDataset[\"SOI\"];\n              })\n              .map((elem, index) => {\n                return (\n                  <Marker\n                    ref={(ref) => {\n                      ref?.bindPopup(\n                        popupContentSNPMap({ ...SNPMapDataset[elem] }, elem),\n                        popupOptions\n                      );\n                    }}\n                    icon={relatedMarker(\n                      { ...SNPMapDataset[elem], submission: elem },\n                      SNPMapDataset[\"SOI\"]\n                    )}\n                    key={\"snp_related_marker_\" + index}\n                    position={[\n                      SNPMapDataset[elem].lat,\n                      SNPMapDataset[elem].lon,\n                    ]}\n                  ></Marker>\n                );\n              })}\n          </>\n        )}\n        {Object.keys(SNPMapDataset)\n          .filter((elem) => {\n            return elem === SNPMapDataset[\"SOI\"];\n          })\n          .map((elem, index) => {\n            return (\n              <Marker\n                ref={(ref) => {\n                    ref?.bindPopup(\n                      popupContentSNPMap({ ...SNPMapDataset[elem] }, elem),\n                      popupOptions\n                    );\n                }}\n                icon={relatedMarker(\n                  { ...SNPMapDataset[elem], submission: elem },\n                  SNPMapDataset[\"SOI\"]\n                )}\n                key={\"snp_related_marker_\" + index}\n                position={[SNPMapDataset[elem].lat, SNPMapDataset[elem].lon]}\n              ></Marker>\n            );\n          })}\n      </MapContainer>\n    </div>\n  );\n})\n\nconst LegendTableAction = ({ SNPMapDataset, openTable, mapRef }) => {\n  const dispatch = useDispatch();\n  const map = useMap();\n  const resizeObserver = new ResizeObserver(() => {\n    if (map && mapRef.current) map.invalidateSize();\n  });\n  const btnShowTable = new L.Control({\n    position: \"topright\",\n  });\n  btnShowTable.onAdd = function (map) {\n    const divContainer = L.DomUtil.create(\"div\", \"leaflet-control leaflet-bar\");\n    divContainer.setAttribute(\"id\", \"btn__show-table\");\n    divContainer.onclick = function () {\n      dispatch(toggleSNPTable());\n    };\n    if (!openTable)\n      divContainer.insertAdjacentHTML(\n        \"afterbegin\",\n        `<a class=\"snp-table-toggle\">Show Table</a>`\n      );\n    else\n      divContainer.insertAdjacentHTML(\n        \"afterbegin\",\n        `<a class=\"snp-table-toggle\">Hide Table</a>`\n      );\n    return divContainer;\n  };\n  const markerLegend = new L.control({ position: \"topright\" });\n  markerLegend.onAdd = function (map) {\n    let div = L.DomUtil.create(\"div\", \"leaflet-control leaflet-bar\");\n    div.style.width = \"150px\";\n    div.style.background = \"white\";\n\n    // Build legend with HTML\n    div.insertAdjacentHTML(\n      \"afterbegin\",\n      `\n    <div style=\"padding-top:5px;\">\n        <span class=\"fs-6\" style=\"padding-left:6px;\"><strong>Legend</strong></span>\n        <span style=\"display: flex; align-items: center; padding-bottom: 5px;\">\n          <img src=${SNPsoi} class=\"legend-marker-img\">\n          <span class=\"legend-marker-title\">Sample</span>\n        </span>\n        <span style=\"display: flex; align-items: center; padding-bottom: 5px;padding-left: 8px;\">\n        <img src=${SNPrelated} width=\"25\" height=\"25\">\n          <span class=\"legend-marker-title\">SNP Relatedness</span>\n        </span>\n        <span style=\"display: flex; align-items: center;\">\n        <img src=${movementClusterImg} class=\"legend-marker-img\">\n        <span class=\"legend-marker-title\">Geographic Group</span>\n        </span>\n      </div>\n    `\n    );\n\n    return div;\n  };\n  useEffect(() => {\n    const latLon = Object.keys(SNPMapDataset)\n      .filter((elem) => {\n        return SNPMapDataset[elem]?.lat && SNPMapDataset[elem]?.lon;\n      })\n      .map((elem) => [SNPMapDataset[elem].lat, SNPMapDataset[elem].lon]);\n    if (latLon?.length > 0) {\n      markerLegend.addTo(map);\n      map.fitBounds(L.latLngBounds(latLon).pad(0.1));\n    }\n    return () => {\n      markerLegend.remove();\n    };\n  }, [SNPMapDataset]);\n\n  useEffect(() => {\n    btnShowTable.addTo(map);\n    return () => {\n      btnShowTable.remove();\n    };\n  }, [openTable]);\n\n  useEffect(() => {\n    if(mapRef.current) resizeObserver.observe(mapRef.current);\n    return () => {\n      resizeObserver.disconnect()\n    };\n  }, []);\n};\n\nexport default SNPMapComp;\n"],"names":["relatedMarker","props","SOI","submission","L","className","concat","iconUrl","SNPsoi","iconSize","iconAnchor","html","number","snp_distance","SNPrelated","styles","border","background","display","SNPMapComp","React","_ref","checkedLayers","useCountyandHotspotLayers","setOpenSideBar","openSideBar","SNPMapDataset","openTable","useSelector","state","counter","openSNPTable","mapRef","useRef","popupContentSNPMap","data","AFnumber","animal_id","dob","slaughter_date","parseFloat","distance","toFixed","cph","os_map_ref","species","animal_type","sex","disclosing_test","import_country","popupOptions","maxWidth","autoClose","closeOnClick","maxHeight","_jsx","ref","children","_jsxs","MapContainer","center","zoom","zoomAnimation","zoomAnimationThreshold","TileLayer","attribution","url","BaseMaps","ResetView","HideSidebar","type","MeasurementTool","HotspotLayers","isChecked","CountyLayers","Object","keys","length","RiskLayers","LegendTableAction","MarkerClusterGroup","chunkedLoading","iconCreateFunction","cluster","getChildCount","filter","elem","map","index","Marker","bindPopup","icon","position","lat","lon","_Fragment","_ref2","dispatch","useDispatch","useMap","resizeObserver","ResizeObserver","current","invalidateSize","btnShowTable","onAdd","divContainer","create","setAttribute","onclick","toggleSNPTable","insertAdjacentHTML","markerLegend","div","style","width","movementClusterImg","useEffect","latLon","_SNPMapDataset$elem","_SNPMapDataset$elem2","addTo","fitBounds","pad","remove","observe","disconnect"],"sourceRoot":""}