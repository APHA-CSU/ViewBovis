{"version":3,"file":"static/js/398.16119870.chunk.js","mappings":"wm71iCA2GA,EAtGqBA,IAAoB,IAAnB,UAAEC,GAAWD,EACjC,MAAME,GAAMC,EAAAA,EAAAA,MA2BNC,EAAqB,CACzBC,aAAa,EACbC,SAAU,IACVC,SAAS,GAILC,EAAkB,SAAUC,GAChC,MAAMC,EAAOD,EAAEE,OAEfD,EAAKE,SAAS,CACZC,OAAQ,EACRC,MAAO,YAITJ,EACGK,UAzCgB,SAAUC,EAAWC,GAExC,MAAMC,EAAYD,EAAOE,MAAM,KAEzBC,EAAcF,EAAUhB,KAAKmB,GAAMA,EAAE,GAAGC,gBAGxCC,EAAmBL,EAAUhB,KAAKmB,GAAMA,EAAEG,MAAM,GAAGC,gBAIzD,GAA2B,IAAvBL,EAAYM,OACd,MAAQ,GAAEV,KAAaI,EAAY,KAAKG,IAG1C,IAAII,EAAiB,GACrB,GAAIP,EAAYM,OAAS,EACvB,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAYM,OAAQE,IACtCD,GAAkBP,EAAYQ,GAAKL,EAAiBK,GAAK,IAG7D,MAAQ,GAAEZ,KAAaW,GACzB,CAoBME,CAAanB,EAAKoB,QAAQC,WAAWC,EAAGtB,EAAKoB,QAAQC,WAAWE,QAChE7B,GAED8B,YAEHxB,EAAKyB,cACP,EAGMC,EAAiB,SAAU3B,GAC/B4B,EAAaC,WAAW7B,EAAEE,OAC5B,EAYM4B,EAAa,SAAU9B,GAC3BP,EAAIsC,UAAU/B,EAAEE,OAAO8B,YACzB,EAcMJ,EAAeK,IAAAA,QAAUC,EAAY,CACzCC,MAboB,WACpB,MAAO,CACLC,UAFiCC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAG,OAGpCjC,OAAQ,IACRmC,QAAS,EACTlC,MAAO,QACPmC,UAAW,IACXC,YAAa,GAEjB,CAISC,CAAc,QACrBC,cA3BoB,SAAUtB,EAASuB,GACvCA,EAAMC,GAAG,CACPC,UAAW/C,EACXgD,SAAUpB,EACVqB,MAAOlB,GAEX,KAwBAmB,EAAAA,EAAAA,YAAU,KACJzD,IACFoC,EAAasB,MAAMzD,GACnBmC,EAAaF,gBAGR,KACLjC,EAAI0D,YAAYvB,EAAa,IAE9B,CAACpC,GAAW,C","sources":["components/Layers/CountyLayers.jsx"],"sourcesContent":["import L from \"leaflet\";\nimport { useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\nimport countyJSON from \"../../data/AHVLA_Counties_GEOJSON.json\";\n\nconst CountyLayers = ({ isChecked }) => {\n  const map = useMap();\n\n  //Function for Leaflet bindPopup method used in `highlightCounty` - capitalise first letter of county (\"KENT\" to \"Kent\")\n  const formatCounty = function (countyNum, county) {\n    // E.g. [\"WILTSHIRE\"] or [\"SOUTH YORKSHIRE\"]\n    const countyArr = county.split(\" \");\n\n    const firstLetter = countyArr.map((x) => x[0].toUpperCase());\n    // firstLetter: [\"W\"] or [\"S\", \"Y\"]\n\n    const remainingLetters = countyArr.map((x) => x.slice(1).toLowerCase());\n    // remainingLetters: [\"iltshire\"] or [\"outh\", \"orkshire\"]\n\n    // Execute for counties with a single word\n    if (firstLetter.length === 1)\n      return `${countyNum} ${firstLetter[0]}${remainingLetters}`;\n\n    // Execute for counties with more than one word\n    let fullCountyName = \"\";\n    if (firstLetter.length > 1) {\n      for (let i = 0; i < firstLetter.length; i++) {\n        fullCountyName += firstLetter[i] + remainingLetters[i] + \" \";\n      }\n    }\n    return `${countyNum} ${fullCountyName}`;\n  };\n\n  const countyPopupOptions = {\n    closeButton: false,\n    maxWidth: 100,\n    autoPan: false,\n  };\n\n  //Function to style polygon (county) borders and show popup on mouseover using Leaflet methods\n  const highlightCounty = function (e) {\n    const poly = e.target;\n    // Polygon borders\n    poly.setStyle({\n      weight: 3,\n      color: \"#252525\",\n    });\n\n    // Popup on hover\n    poly\n      .bindPopup(\n        formatCounty(poly.feature.properties.C, poly.feature.properties.COUNTY),\n        countyPopupOptions\n      )\n      .openPopup();\n\n    poly.bringToFront();\n  };\n\n  //Function to reset border style on mouseout\n  const resetHighlight = function (e) {\n    countyLayers.resetStyle(e.target);\n  };\n\n  //Function to add `highlightCounty` and `resetHighlight` on mouseover/out on each feature (county)\n  const onEachFeature = function (feature, layer) {\n    layer.on({\n      mouseover: highlightCounty,\n      mouseout: resetHighlight,\n      click: zoomToPoly,\n    });\n  };\n\n  //Function to zoom to a polygon (county) when it is clicked\n  const zoomToPoly = function (e) {\n    map.fitBounds(e.target.getBounds());\n  };\n\n  const styleCounties = function (color = \"blue\") {\n    return {\n      fillColor: color,\n      weight: 1.5,\n      opacity: 1,\n      color: \"white\",\n      dashArray: \"3\",\n      fillOpacity: 0.3,\n    };\n  };\n\n  //Create GeoJSON layer using Leaflets' `L.geoJSON` method & countyJSON data\n  const countyLayers = L.geoJSON(countyJSON, {\n    style: styleCounties(\"grey\"),\n    onEachFeature: onEachFeature,\n  });\n\n  useEffect(() => {\n    if (isChecked) {\n      countyLayers.addTo(map);\n      countyLayers.bringToFront();\n    }\n\n    return () => {\n      map.removeLayer(countyLayers);\n    };\n  }, [isChecked]);\n};\n\nexport default CountyLayers;\n"],"names":["_ref","isChecked","map","useMap","countyPopupOptions","closeButton","maxWidth","autoPan","highlightCounty","e","poly","target","setStyle","weight","color","bindPopup","countyNum","county","countyArr","split","firstLetter","x","toUpperCase","remainingLetters","slice","toLowerCase","length","fullCountyName","i","formatCounty","feature","properties","C","COUNTY","openPopup","bringToFront","resetHighlight","countyLayers","resetStyle","zoomToPoly","fitBounds","getBounds","L","countyJSON","style","fillColor","arguments","undefined","opacity","dashArray","fillOpacity","styleCounties","onEachFeature","layer","on","mouseover","mouseout","click","useEffect","addTo","removeLayer"],"sourceRoot":""}